// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

StructuredBuffer<int> ele_idx;
StructuredBuffer<float> ele_minv;
StructuredBuffer<float> ele_volume;
RWStructuredBuffer<float> ele_test;
StructuredBuffer<float> node_pos;
RWByteAddressBuffer node_force;

float3x3 multiple(float3x3 Amat, float3x3 Bmat)
{
    float3x3 Cmat;
    Cmat._11 = Amat._11 * Bmat._11 + Amat._12 * Bmat._21 + Amat._13 * Bmat._31;
    Cmat._12 = Amat._11 * Bmat._12 + Amat._12 * Bmat._22 + Amat._13 * Bmat._32;
    Cmat._13 = Amat._11 * Bmat._13 + Amat._12 * Bmat._23 + Amat._13 * Bmat._33;

    Cmat._21 = Amat._21 * Bmat._11 + Amat._22 * Bmat._21 + Amat._23 * Bmat._31;
    Cmat._22 = Amat._21 * Bmat._12 + Amat._22 * Bmat._22 + Amat._23 * Bmat._32;
    Cmat._23 = Amat._21 * Bmat._13 + Amat._22 * Bmat._23 + Amat._23 * Bmat._33;

    Cmat._31 = Amat._31 * Bmat._11 + Amat._32 * Bmat._21 + Amat._33 * Bmat._31;
    Cmat._32 = Amat._31 * Bmat._12 + Amat._32 * Bmat._22 + Amat._33 * Bmat._32;
    Cmat._33 = Amat._31 * Bmat._13 + Amat._32 * Bmat._23 + Amat._33 * Bmat._33;

    return Cmat;
}

float3x3 transpose(float3x3 Amat)
{
    return float3x3(Amat._11, Amat._21, Amat._31,
        Amat._12, Amat._22, Amat._32,
        Amat._13, Amat._23, Amat._33);
}

float3x3 identity()
{
    return float3x3(1.0, 0, 0, 0, 1.0, 0, 0, 0, 1.0);
}

void atomicAddFloat(RWByteAddressBuffer buf, int idx, float value)
{
    uint i_val = asuint(value);
    uint tmp0 = 0;
    uint tmp1;
    // Raw Bmatyte 4 点浮点数对齐
    uint meidx = idx * 4;
    while (true)
    {
        //如果node_force[idx] == tmp0，
        //那么tmp1 = node_force[idx], node_force[idx] = i_val
        //此时tmp0 == tmp1 == 原始值
        //因为有可能在相加的过程中，别的核也在加，那么自己就被改了
        //所以除非相等，才保证在自己改动的过程别人没改过
        //如果不相等，就要更新别人改过后的值，也就是tmp1
        buf.InterlockedCompareExchange(meidx, tmp0, i_val, tmp1);
        if (tmp0 == tmp1)
            break;
        tmp0 = tmp1;
        i_val = asuint(value + asfloat(tmp1));
    }
}

void debug_test(float3x3 Amat, int idx)
{
    ele_test[idx * 9 + 0] = Amat._11;
    ele_test[idx * 9 + 1] = Amat._12;
    ele_test[idx * 9 + 2] = Amat._13;

    ele_test[idx * 9 + 3] = Amat._21;
    ele_test[idx * 9 + 4] = Amat._22;
    ele_test[idx * 9 + 5] = Amat._23;

    ele_test[idx * 9 + 6] = Amat._31;
    ele_test[idx * 9 + 7] = Amat._32;
    ele_test[idx * 9 + 8] = Amat._33;
}

[numthreads(2, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    // 也许可以把node_pos 写进共享内存？
    // 另外乘法太耗时了，必须提出来

    //
    /*
    float tidx = (id.x * 4 + 0)*3;
    float p0x = node_pos[tidx + 0];
    float p0y = node_pos[tidx + 1];
    float p0z = node_pos[tidx + 2];

    tidx = (id.x * 4 + 1) * 3;
    float p1x = node_pos[tidx + 0];
    float p1y = node_pos[tidx + 1];
    float p1z = node_pos[tidx + 2];

    tidx = (id.x * 4 + 2) * 3;
    float p2x = node_pos[tidx + 0];
    float p2y = node_pos[tidx + 1];
    float p2z = node_pos[tidx + 2];

    tidx = (id.x * 4 + 3) * 3;
    float p3x = node_pos[tidx + 0];
    float p3y = node_pos[tidx + 1];
    float p3z = node_pos[tidx + 2];

    float3x3 Ds = float3x3(p1x - p0x, p2x - p0x, p3x - p0x,
        p1y - p0y, p2y - p0y, p3y - p0y,
        p1z - p0z, p2z - p0y, p3z - p0z);

    
    tidx = id.x * 9;
    float3x3 Dminv = float3x3(ele_minv[tidx + 0], ele_minv[tidx + 1], ele_minv[tidx + 2],
        ele_minv[tidx + 3], ele_minv[tidx + 4], ele_minv[tidx + 5],
        ele_minv[tidx + 6], ele_minv[tidx + 7], ele_minv[tidx + 8]);
    float3x3 F = multiple(Ds, Dminv]);

    

    float3x3 E = (multiple(transpose(F), F) - identity()) * 0.5;
    float trE = E._11 + E._22 + E._33;

    float mu = 2;
    float la = 2;
    float3x3 piola = mutiple(F, 2 * mu * E + la * trE * identity());
    float3x3 H = -ele_volume[id.x] * multiple(piola, transpose(Dminv));
    */
}
