// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

RWByteAddressBuffer  Kmat; // node_num * 3 ** 2
StructuredBuffer<float>  node_force; // node_num * 3
StructuredBuffer<float> node_vel; // node_num * 3
RWStructuredBuffer<float> Amat; // node_num * 3 ** 3
RWStructuredBuffer<float> resvec; // node_num * 3
const int krow;
float invmass;
float dt;

[numthreads(8,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    int idx;
    float Ax = 0;
    for (int i = 0; i < krow; i++)
    {
        idx = id.x * krow + i;
        if (i == id.x)
        {
            Amat[idx] = 1 - asfloat(Kmat.Load(idx * 4))* dt * dt * invmass;
        }
        else
        {
            Amat[idx] = -asfloat(Kmat.Load(idx * 4))* dt * dt * invmass;
        }
        // to do : group shared memory
        Ax += Amat[idx] * node_vel[i];
        Kmat.Store(idx * 4,asuint(0));
    }
    resvec[id.x] = node_vel[id.x] + dt * invmass * node_force[id.x] - Ax;
    
}
